Scenario 2:
You are coding the gameplay of a cool new 3D arena shooter that has a design requirement involving many enemies, bullets and coins to be on screen at once. You notice when initially testing your game the framerate is uneven and the game seems to even freeze at times.

● Questions:
○ What steps do you take to deduce the problem?
Mesh : First to check is how optimised models are for example coins does not necessarily need to show in high polygon since they will be almost circle or similar shape so ideally they should be in low polygons.Same thing with bullets. 

Texture : It should also be worthy to check and optimised size of texture and it's setting in import setting. The bigger texture resolution more memory consumption

Physics : Instead of adding rigid body to every object it's better to add on only those which are near player and about to interact. Once bullet released and hit ground on every they should be removed either disabling game object or destroy from pool.

○ What are some programmatic solutions you could propose to fix the problem?

As said earlier you can manage how physics via coding and instead of instantiating object it is advisable to use pool for butlets coins so one it get's used they get reset and spawn somewhere else.

Make sure not to call any method in Update() which does not requires realtime sync. 
Disable enemy behaviour when they are out of view from player to avoid additional memory consumption


○ How will you confirm your changes had a positive impact?
Check the solution in lower devices while keeping development build on and off
Use profiler to see any spikes registered after implementing new solution. If you see those spikes they still may create issue so keep deep profiling option on to see potential spike

